# ========= Infrastructure ==============:
# Infrastructure:
    ✔ UI Repo and basic framework
    ✔ API Repo and basic framework
    ✔ Steps to run the projects
    ✔ Apply Repo restriction
    - Code merging approach
    - Test Env setup in AWS
    - Prod Env setup in AWS
    - DB Connection and Password protection/injection

# Create tickets:
    - Beakdown requirements into task @started
    - Create tickets in Github @started    

====== Participants =====:

# Import Participants UI:
- [ ] Provide menu
- [ ] File import button
- [ ] Parse the imported file data, and post to API

# Import Participants API:
- [ ] Implement an endpoint to Import Participants 
- [ ] For a given imported, for the given MIS ID, first delete the existing record from database, and then import the new record

# List Participants UI:
- [ ] List the participants in table by calling the endpoint
- [ ] Provide standard pagination / sorting / search 
- [ ] Provide multi column sorting
- [ ] Provide filter on each column
- [ ] Freeze the table header

# List Participants API:
- [ ] Implement an endpoint to get Participants 

# View a Participant detail UI:
- [ ] On clicking participant, display that participant detail in popup 

# Additional fields: 
- [ ] BAPS ID: add this field once added to PBI
- [ ] Participation center (can be different that center of candidate)
- [ ] Checkin field

====== Region Centers =====:

# Region and Centers Schema:
- [ ] API: "Center" table schema (Id, Region Name, Center Name) 
- [ ] API: Implement an endpoint to return list centers from table "Centers"
- [ ] UI: Add menu in navigation panel: "Region Centers"
- [ ] UI: Make an API call and display list of region centers
- [ ] UI: Apply standard sorting and searching on list view

====== Grading Topics =====:

# Skill Categories:
- [ ] API: "SkillCategories" table Schema (Id, Skill Name, Category Name) 
- [ ] API: Implement an endpoint to return data from table SkillCategories
- [ ] UI: Menu: Add "Skill Categories" menu in navigation panel
- [ ] UI: List Page: Make an API call, and display data
- [ ] UI: List Page: Apply standard sorting and searching

# Skill Grading Topics:
- [ ] API: "GradingTopics" table Schema (Id, Topic Name, Description, Round, WeightageOptions[], RequiredProctors, IsActive) 
- [ ] API: Implement an endpoint to return list of data
- [ ] API: Implement an endpoint to Add record
- [ ] API: Implement an endpoint to Edit record
- [ ] UI: Menu: Add "Grading Topics" menu in navigation panel
- [ ] UI: List Page: Make an API call, and display data
- [ ] UI: List Page: Apply standard sorting and searching
- [ ] UI: Add Page: Design UI to Add or Edit record, and call API

====== User Access Control =====:

# Users:
- DB: Schema  (Id, BAPS ID, NAME, Region, Center, Roles[], EventIds[], Mandals[], SKILL CATEGORY IDs[], Password, Checkin, IsActive)
- API: Add / Edit 
- UI: Add / Edit 
- Note:
    - Roles are National Admin / Regional Admin / Proctors 
    - National Admin: Can manage regional admin AND proctors of all region of ANY genders
    - Regional Admin: Can manage proctors according to THEIR gender
    - Proctor: Can search and grade participant of their ASSIGNED EVENTS and ASSIGNED SKILLS and ASSIGNED GENDERS only

# Roles and Permissions:
- 1. Role: National Admin User:
    - CRUD Regional Admin Users
    - CRUD Events 
    - View Proctor Users
    - CRUD Skill Grading Questions
- 2. Role: Regional Admin User:
    - CRUD Proctor Users
    - View Skill Grading Questions
- 3. Role: Proctor User:
    - Search Participant
    - Grade Participant

====== Events =====:

- DB: Schema: (Id, Event Name, Event Start Date Time, Event End Date Time, Region, Centers[], IsActive)
- API: List / Add / Edit 
- UI: List / Add / Edit 
- Note: 
    - Proctor Admins will be able to create events for proctoring, selecting the number of centers, and forming clusters of centers for a specific event. 
    - Set Event Periods: The Proctor Admin can specify the start and end time for proctoring events. 
    - During this period, only delegates from the selected centers will be allowed to participate.
    - Regional admin can only change the time, but not the date

====== Grading Participants =====:

# Grading Participants CRUD:
    - Display tabs according to the skills access to the proctor:
        - API
        - UI
    - Search Candidate by proctor
        - API: (The delegate will only be shown if they have participated in the selected competition (based on the tab) and if the competition category aligns with the proctor’s allowed access)
        - UI : (A text input field and QR scan option, like the satsang mukhpath, will appear on the screen)
    - Display list of topic based on selected skill for a candidate (Once proctor clicks start proctoring, the proctor will be shown a series of question topics)
        - API
        - UI
    - Grade Candidate skills by proctor
        - DB: Schema : Candidate ID, ProctorId, SKILL CATEGORY ID, Grading Topic Id, Weitage)
        - API
        - UI
    - View list of graded candidite
        - API
        - UI
        - Allow edit option to change the grade
        - Once event time is over, NO ONE should be able to change the grade
        
    - Candidate Status: Return status of candidate's each skill competition status (PENDING / COMPLETED)
        - UI
        - API : return COMPLETED if all the topic has been graded else PENDING
    
    - Participant BAPS ID authentication API using encode/decode BAPS ID

    - TBD: at a time only x proctors should be able to access or grade the candidate

====== Scheduling Participants =====:

- Generate schedule for given cluster file
- Save cluster schedule to database
- View Saved cluster schedule
- Export cluster schedule
- API: Get a schedule for a candidate (API can be called from mySatsangApp or Adhiveshan portal)


====== Dashboard =====:
- Events View
    - In progress
    - up coming
- Skill Participants Count
- Regional wise proctors count

====== Export =====:
- Clustors / National Admins / Regional Admins / Proctors or Users / Events / Grading
    
====== CheckIn Proctor and Participants =====:

- UI: Search by MIS ID or BAPS ID
- API: Search by MIS ID or BAPS ID from Participats AND Users
- UI: Check in for the MIS ID or BAPS ID
- API: Check in by MIS ID or BAPS ID in Participats AND Users

===== Cross Cutting =====:

# Authentication (Login / Logout):
    - UI 
    - API 
    - Check Access on each screen/menu based on permissions: 
# Audit fields:
    - Audit field in all tables
    - Set audit fields while add/edit
# Activity tracking:
    - DB: Schema (TableName, RecordId, Activity, Activity By, Activity On)
    - API:
    - UI:
