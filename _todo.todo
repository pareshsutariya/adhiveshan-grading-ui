# =======================:
    - Breakdown into tasks
    - Create tickets
    - Repo access
    - Repo restriction
    
====== Modules =====:
# Repo and basic framework:
    ✔ UI @done
    ✔ API @done
    ✔ UI/API: Basic framework @done
    ✔ Separate out component HTML files @done

# Participants:
    - Import Participants data (DB)
        - Additional fields: Participation center (can be different that center of candidate)
    ✔ List view UI: Display Participants @done
    ✔ API: Display Participants @done
    ✔ Detail view UI: Display Participants @done

# SKILL and CATEGORIES Schema:
    - DB: Schema (Skill Category Id, SkillName, Category Name) 
    - UI: LIST
    - API: LIST

# Skill Grading Questions CRUD:
    - DB: Schema (SKILL CATEGORY ID, Topic Name, Decription, Round, Weightages[], RequiredProctors, IsActive)
    - UI: List / Add / Edit 
    - API: List / Add / Edit 
    
# Proctors Admins CRUD:
    - DB: Schema :  (BAPS ID, NAME, Regional, Mandals[], IsActive)
    - UI: List / Add / Edit 
    - API: List / Add / Edit 
    - Note:
        - National Admin: Manage through DB, will be managed proctors according of any genders
        - Regional Proctor Admin: Manage through DB, will be managed proctors according to their gender

# Events CRUD:
    - DB: Schema: (Event Start Date Time, Event End Date Time, Regional, Centers[], IsActive)
    - UI: List / Add / Edit 
    - API: List / Add / Edit 
    - Note: 
        - Proctor Admins will be able to create events for proctoring, selecting the number of centers, and forming clusters of centers for a specific event. 
        - Set Event Periods: The Proctor Admin can specify the start and end time for proctoring events. 
        - During this period, only delegates from the selected centers will be allowed to participate.

# Proctors CRUD:
    - DB: Schema : (BAPS ID, NAME, CENTER, EventIds[], Mandals[], SKILL CATEGORY IDs[], IsActive)
    - UI: Add / Edit 
    - API: Add / Edit 
    - TBD: 
    - Note: Proctor Admins can add proctors for a particular region and assign them to specific skill proctor types.

# Grading Participants CRUD:
    - Display tabs according to the skills access to the proctor:
        - UI
        - API
    - Search Candidate by proctor
        - UI : (A text input field and QR scan option, like the satsang mukhpath, will appear on the screen)
        - API: (The delegate will only be shown if they have participated in the selected competition (based on the tab) and if the competition category aligns with the proctor’s allowed access)
    - Display list of topic based on selected skill for a candidate (Once proctor clicks start proctoring, the proctor will be shown a series of question topics)
        - UI
        - API
    - Grade Candidate skills by proctor
        - DB: Schema : Candidate ID, ProctorId, SKILL CATEGORY ID, Grading Topic Id, Weitage)
        - UI
        - API
    - View list of graded candidite
        - UI
        - API
        - Allow edit option to change the grade
        - Once event time is over, NO ONE should be able to change the grade
        
    - Candidate Status: Return status of candidate's each skill competition status (PENDING / COMPLETED)
        - UI
        - API : return COMPLETED if all the topic has been graded else PENDING
    
    - Participant BAPS ID authentication API using encode/decode BAPS ID

    - TBD: at a time only x proctors should be able to access or grade the candidate

===== Cross Cutting =====:
# Login Users:
    - DB: Schema
    - UI: Add / Edit 
    - API: Add / Edit 
# Authentication (Login / Logout):
    - UI 
    - API 
    - Check Access on each screen/menu based on permissions: 
# Audit fields:
    - Audit field in all tables
    - Set audit fields while add/edit
# Activity tracking:
    - DB: Schema (TableName, RecordId, Activity, Activity By, Activity On)
    - API:
    - UI:
